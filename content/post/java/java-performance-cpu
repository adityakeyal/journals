---
title: "Java Performance Issues"
date: 2021-10-13T07:49:02+05:30
tags: [java]
categories: [java]
draft: true
---

## Performance Issue - what and why
There is nothing more daunting and interesting than issues related to performance. While we pay a lot of "undue attention" to performance in code reviews, "Don't use a linked list, use an array list or use a Linked List not an Array List", we often miss the bigger picture. 
Most performance issues don't come from usage of type of list or types of for loops, they actually come from the most interesting and tricky parts of code.
It could be a thread which is resulting in a deadlock due to a behavior in HashMap, it could be a very poorly written SQL query that when subjected to production loads is taking exceptionally high time, 
or even the more common suspects of Garbage Collector (GC).

The challenge with such issues are no expert code reviewer can actually identify such issues by walking through the code. Albeit I am sure there are multiple people who love to claim of an exception to the rule.
The real challenge is, when presented with a problem such as this, is when the issue is 
a. Sporadic
b. Indeterministic
c. Happens only on production or UAT

Ho can we actually find the root cause of such issues without relying on some expensive tool or mere guess work.


## Restart and it works
How many times have we encountered issues which can be solved by a simple restart. While a restart is a short term workaround, with that 1 restart we losse credible information. Before we restart (either the machine or the process) we must make it a point to capture some additional metrics
Some critical things to capture 
 - CPU Utilization 
 - Memory utilization
 - JVM Metrics
 - Log files

These are explained is more details below

### CPU Metrics
The first thing to observe is the CPU utilization at a machine and process level. The easiest way to capture them is through the top command.
#### Command:
```$ top```
#### Output
![cpu-utilization.png](/java-performance/cpu-utilization.png)

Some points to consider:
1. Total CPU Utilization - thsi gives a good indicator if the slowness is due to CPU starvation. This value can go upto 100%*[no of cores]. 
2. Top CPU hogging process. This is a good indicator to find the culprit. Sometimes this could be your own app. Sometmes it could be another app eating away at crucial resources and starving your app from CPU.

